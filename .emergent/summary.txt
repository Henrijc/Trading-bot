<analysis>
The previous AI engineer's work centered on stabilizing the CI/CD deployment of the AI Crypto Trading Coach, moving from an MVP to a robust, automatically deployable system. The process was highly iterative and marked by persistent build and runtime errors, leading to user frustration. Key challenges included Dockerfile inconsistencies (Node.js versions, Yarn/NPM issues, missing build tools, TA-Lib compilation),  misconfigurations ( errors, missing services), GitHub commit failures due to large files, and SSH deployment timeouts. The AI engineer, guided by user input and debugging, repeatedly fixed, broke, and refixed components. The ultimate architectural decision, dictated by the user, was a shift to a release-based deployment model using GitHub Container Registry (GHCR) and pre-built Docker images, aiming to resolve on-server build complexities.
</analysis>

<product_requirements>
The AI Crypto Trading Coach is an AI-driven system aiming for R100,000 monthly profit. It features daily strategies, weekly cash-outs, real-time Luno portfolio analysis, robust risk management, and conversational AI. Core functionalities include Google 2FA, AI-driven portfolio/goal analysis, AI web research, concise AI responses, auto-scrolling chat, persistent conversation memory with session forking, targeted trading campaigns, dynamic dashboard updates, and semi-automatic trading requiring user approval. The UI adheres to a black/cyan color scheme, dynamic targets, accurate local timezone timestamps, and full portfolio data. Recent enhancements include Freqtrade-inspired backtesting (simulation mode) and live trading, alongside a fully implemented AI Decision Engine. The current focus has been on robust deployment via a standalone Docker package and a CI/CD pipeline for VPS deployment. Future plans involve Google Gemini and TikTok integrations.
</product_requirements>

<key_technical_concepts>
- **Full-stack**: React, FastAPI, MongoDB, Docker, Docker Compose, Nginx.
- **AI/ML**: FreqAI, AI Decision Engine, Google Gemini (planned).
- **Trading**: Freqtrade-inspired, Backtesting, Live Trading, Risk Management, Luno API.
- **Deployment**: VPS (Ubuntu 22.04), CI/CD (GitHub Actions), SSH, GitHub Container Registry (GHCR).
- **Security**: JWT, bcrypt, TOTP (2FA), SSL/HTTPS.
</key_technical_concepts>

<code_architecture>
The application uses a three-tier architecture: Frontend Cockpit (React) ↔ Backend Orchestrator (FastAPI) ↔ Trading Bot (Custom Freqtrade-style with FreqAI). MongoDB is the database. The deployment strategy has recently shifted to a release-based model using GitHub Container Registry.

**Detailed Directory Structure:**

- : Defines the CI/CD workflow for VPS deployment.
  - **Summary of why important**: Controls the overall deployment process. It was significantly re-architected to support the new GHCR-based deployment model, separating image building/pushing from server deployment.
  - **Summary of changes made**:
    - Changed  before .
    - Added .
    - Included  to .
    - Updated SSH action  to  and  to .
    - **Major Change**: Refactored into two jobs:  (builds Docker images and pushes to GHCR) and  (SSH into VPS, ).

- : Orchestrates the multi-service Docker deployment for production.
  - **Summary of why important**: Defines service relationships, volumes, networks, and now, the pre-built images for production.
  - **Summary of changes made**:
    - Build contexts () and absolute  paths () were corrected.
    - Added missing  service definition and its associated volumes (, ).
    - Downgraded  from  to  for compatibility.
    - Simplified  and removed complex health checks.
    - Added explicit  for network definition.
    - **Major Change**: All  sections were removed and replaced with  directives pointing to .

- : Defines the build process for the React frontend in production.
  - **Summary of why important**: Was a major source of build failures.
  - **Summary of changes made**:
    - Changed  to .
    - Replaced  with .
    - Changed  to  to include .
    - Restructured to copy  and  first for better caching.
    - The file was also entirely replaced with a user-provided optimized version including  base image, non-root user setup, and proper Nginx configuration for a single-page app.

- : Defines the Dockerfile for the FastAPI backend.
  - **Summary of why important**: Required hardening for Python dependencies and build tools.
  - **Summary of changes made**:
    - Added comprehensive system packages like , , , , , , , .
    - Restructured to copy  first for better caching.

- : Defines the Dockerfile for the Freqtrade trading bot.
  - **Summary of why important**: Was the primary source of complex TA-Lib compilation errors.
  - **Summary of changes made**:
    - Repeatedly modified to fix TA-Lib installation, eventually switching from apt 2.6.1 (arm64)
Usage: apt-get [options] command
       apt-get [options] install|remove pkg1 [pkg2 ...]
       apt-get [options] source pkg1 [pkg2 ...]

apt-get is a command line interface for retrieval of packages
and information about them from authenticated sources and
for installation, upgrade and removal of packages together
with their dependencies.

Most used commands:
  update - Retrieve new lists of packages
  upgrade - Perform an upgrade
  install - Install new packages (pkg is libc6 not libc6.deb)
  reinstall - Reinstall packages (pkg is libc6 not libc6.deb)
  remove - Remove packages
  purge - Remove packages and config files
  autoremove - Remove automatically all unused packages
  dist-upgrade - Distribution upgrade, see apt-get(8)
  dselect-upgrade - Follow dselect selections
  build-dep - Configure build-dependencies for source packages
  satisfy - Satisfy dependency strings
  clean - Erase downloaded archive files
  autoclean - Erase old downloaded archive files
  check - Verify that there are no broken dependencies
  source - Download source archives
  download - Download the binary package into the current directory
  changelog - Download and display the changelog for the given package

See apt-get(8) for more information about the available commands.
Configuration options and syntax is detailed in apt.conf(5).
Information about how to configure sources can be found in sources.list(5).
Package and version choices can be expressed via apt_preferences(5).
Security details are available in apt-secure(8).
                                        This APT has Super Cow Powers. packages (which didn't exist) to manual source compilation (wget, tar, make install) with .
    - **Major Change**: Switched base image to  to leverage a pre-built scientific Python stack.
    - Changed  to , and included  to resolve  and .
    - Added  and other  commands for image size optimization and log reduction.
    - Restructured to copy  first for better caching.

- : Main FastAPI application.
  - **Summary of changes made**: Added detailed startup error logging for critical environment variables (e.g., , ).

- : Main trading bot script.
  - **Summary of changes made**: Added detailed startup error logging for missing trading credentials (, ).

- : Frontend Node.js dependencies.
  - **Summary of changes made**: Added  to .

- : Yarn lockfile.
  - **Summary of changes made**: Regenerated multiple times to sync with  changes.
</code_architecture>

<pending_tasks>
- Resolve persistent amber/gold colors on the login page ().
- Fix persistent 2-hour timestamp discrepancy for AI messages in the UI.
- Diagnose and optimize Google Gemini API problems causing timeouts and non-responsiveness.
- Implement TikTok integration for social sentiment analysis.
- Further refine the  script to be more comprehensive.
</pending_tasks>

<current_work>
Immediately prior to this summary, the AI engineer successfully implemented a major architectural shift to a release-based deployment model using GitHub Container Registry (GHCR). This involved:

1.  **Updating **: All  sections for , , and  services were removed. They were replaced with  directives pointing to pre-built images on GHCR (e.g., ).
2.  **Updating **: The CI/CD pipeline was refactored into two distinct jobs:
    *   **Build and Push Images**: This job now builds the Docker images for all services within GitHub Actions (leveraging its robust build resources) and pushes them to GHCR.
    *   **Trigger Server Update**: This job SSHs into the VPS and executes a simple , pulling the latest pre-built images and starting the containers.
    The SSH  and  in this workflow were also increased to prevent timeouts during deployment.
3.  **Finalizing Dockerfiles**:  now uses  as a base image, installing , , , and  via  for reliable builds. It also includes cleanup steps to reduce image size and verbosity.  and  (which was entirely replaced with an optimized version from user input) also have updated dependencies and caching strategies.
4.  **Addressing GitHub Sync Issues**: Repeatedly, large files ( cache, large data files) were identified and removed from the workspace to unblock the Save to GitHub functionality, which the user reported was consistently failing.

The current state is that the deployment strategy has been fundamentally changed to overcome the numerous build and runtime failures experienced previously. The previous AI engineer has just provided the user with a detailed breakdown of the updated folder structure and key files after implementing this new strategy.
</current_work>

<optional_next_step>
The deployment strategy has been comprehensively updated to use GitHub Container Registry. The next logical step is for the user to initiate a deployment to verify that the implemented changes resolve the persistent build and runtime issues.
</optional_next_step>
