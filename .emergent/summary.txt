<analysis>
The previous AI engineer’s work has been a highly iterative and often challenging journey to establish a robust and deployable CI/CD pipeline for the AI Crypto Trading Coach. Initially, the focus was on stabilizing an MVP to production, but this was met with persistent build and runtime errors related to Dockerfiles (Node.js, TA-Lib, ),  misconfigurations, and deployment issues (SSH timeouts, large files, unauthorized pulls). The user's frustration escalated significantly due to repeated failures and the AI engineer's missteps, including inadvertently breaking the live website by deploying conflicting containers via CI/CD. Key architectural decisions included shifting to a release-based deployment model using GHCR, a complex back-and-forth on CI/CD workflow separation, and finally, a copy entire project strategy within Docker containers to resolve module import issues. The engineer also removed and then reinstated core components like Freqtrade after user intervention, highlighting the difficulty in balancing immediate bug fixes with maintaining application integrity. The process demonstrates resilience in debugging but also a struggle with architectural consistency and understanding the full impact of changes on a live system.
</analysis>

<product_requirements>
The AI Crypto Trading Coach is an AI-driven system designed to achieve R100,000 monthly profit. Its core features include daily AI-driven strategies, weekly cash-outs, real-time Luno portfolio analysis, robust risk management, and a conversational AI interface. Key functionalities encompass Google 2FA, AI-driven portfolio/goal analysis, AI web research, concise AI responses, auto-scrolling chat, persistent conversation memory with session forking, targeted trading campaigns, dynamic dashboard updates, and semi-automatic trading requiring user approval. The UI follows a black/cyan color scheme with dynamic targets, accurate local timezone timestamps, and full portfolio data. Recent enhancements include Freqtrade-inspired backtesting (simulation mode) and live trading, alongside a fully implemented AI Decision Engine. The primary development focus has been on robust deployment via a standalone Docker package and a CI/CD pipeline for VPS deployment. Future plans involve Google Gemini and TikTok integrations.
</product_requirements>

<key_technical_concepts>
- **Full-stack**: React, FastAPI, MongoDB, Docker, Docker Compose (v2), Nginx.
- **AI/ML**: FreqAI, AI Decision Engine, Google Gemini.
- **Trading**: Freqtrade-inspired, Backtesting, Live Trading, Risk Management, Luno API,  library (for technical analysis).
- **Deployment**: VPS (Ubuntu 22.04), CI/CD (GitHub Actions), SSH, GitHub Container Registry (GHCR).
- **Security**: JWT, bcrypt, TOTP (2FA), SSL/HTTPS.
</key_technical_concepts>

<code_architecture>
The application uses a three-tier architecture: Frontend Cockpit (React) ↔ Backend Orchestrator (FastAPI) ↔ Trading Bot (Custom Freqtrade-style with FreqAI). MongoDB is the database. The deployment strategy has been re-architected multiple times and currently employs a release-based model using GitHub Container Registry, with a new copy entire project into container Docker strategy.

**Detailed Directory Structure (Current as per trajectory):**
tagoogle-generativeaiopenaiemergent_mockai_service.pytechnical_analysis_service.pyta
- : Defines the CI/CD workflow.
  - **Summary**: Now configured for manual  trigger only, with a DEPLOY confirmation input. It contains two jobs:  (builds Docker images for backend, frontend, freqtrade and pushes to GHCR using ) and  (SSH into VPS,  with , , then ). Timeouts increased to 1200s/1800s.
  - **Critical Snippet (Deploy Job Script - final state):**
    
- : Orchestrates the multi-service Docker deployment for production.
  - **Summary**: Uses  directives pointing to . Includes comprehensive  configurations and  for proper service startup order. Ports have been changed to unique, high-numbered ports (e.g.,  for frontend,  for backend) to avoid conflicts with existing services. Uses .
- , , : Dockerfiles for respective services.
  - **Summary**: All Dockerfiles have been simplified to use  and  to copy the entire repository into each container's  directory, resolving  and pathing issues.  is set to ensure all modules are discoverable.  uses .  includes  with  and  library for technical analysis, explicitly bypassing TA-Lib compilation.
  - **Critical Snippet (Example for backend - similar for others):**
    
-  & : Python dependencies.
  - **Summary**:  now includes , , and .  was removed.  explicitly lists  and  with its core dependencies to avoid TA-Lib.
- : Main FastAPI application.
  - **Summary**: Added a  endpoint for Docker health checks.
- : Main trading bot script.
  - **Summary**: Removed  hacks and now uses standard import  due to the new Docker  strategy.
- : Rewritten to use the pure Python  library instead of .
- : New file to mock  functionality using  and .
- : A new root-level  was created (though  is referenced in CI/CD). This new file intends to serve a start fresh local setup.

</code_architecture>

<pending_tasks>
- Resolve persistent amber/gold colors on the login page ().
- Fix persistent 2-hour timestamp discrepancy for AI messages in the UI.
- Diagnose and optimize Google Gemini API problems causing timeouts and non-responsiveness.
- Implement TikTok integration for social sentiment analysis.
- Further refine the  script to be more comprehensive. (Note: Many installer scripts were later removed due to conflicts).
</pending_tasks>

<current_work>
Immediately prior to this summary, the AI engineer was addressing a series of critical build and deployment failures, specifically the  for  and persistent  compilation errors. The solution adopted for these complex pathing and dependency issues was a major architectural overhaul for the Docker build process.

The Simplified Docker Context and Python Pathing strategy was implemented across all application services:
- ****, ****, and **** were modified to:
    - Set  to .
    - Use  to copy the entire project repository (from the build context, which is the repository root) into the  directory inside each container.
    - Set  to ensure all internal modules (e.g., , ) are discoverable.
- **** was reverted to use standard imports like , as the new Docker strategy makes these paths valid.
- The  compilation issues were addressed by:
    - Modifying  to remove  and instead include  (a pure Python technical analysis library).
    - Modifying  to install  itself using  and then manually installing its other core dependencies, thus bypassing  as a direct dependency.
    - Rewriting  to utilize the  library for all technical indicator calculations.
    -  was initially mocked, but the most recent  and  changes imply a move towards fully working dependencies like  and  or .

The CI/CD pipeline () was also reconfigured to be explicitly manual-only (), requiring a DEPLOY confirmation, to prevent accidental deployments and conflicts with the user's existing website. This was a critical response to the AI inadvertently causing a 502 error on the user's primary website by deploying conflicting Docker containers. Port mappings in  were updated to use randomly selected high ports (e.g., 19543-19546) to further prevent conflicts.

The current state is that the core Docker build and dependency issues have been fundamentally re-engineered to be more robust, and the CI/CD pipeline is under manual control. The environment has been synchronized with the latest changes, and the next step is for the user to manually trigger the deployment to test these fixes.
</current_work>

<optional_next_step>
The next step is for the user to manually trigger the CI/CD deployment on GitHub Actions to test the implemented Docker and dependency fixes on the VPS.
</optional_next_step>
